{
  "name": "angular-socket-io",
  "version": "0.2.0",
  "main": "socket.js",
  "dependencies": {
    "angular": "~1.0.5"
  },
  "gitHead": "f8d623ea13248765467cddbe40bee58320811eb6",
  "readme": "# angular-socket-io\nBower Component for using AngularJS with [Socket.IO](http://socket.io/), based on [this](http://briantford.com/blog/angular-socket-io.html).\n\n\n## Install\n\n1. `bower install angular-socket-io` or [download the zip](https://github.com/btford/angular-socket-io/archive/master.zip).\n2. Made sure the Socket.IO client lib is loaded. It's often served at `/socket.io/socket.io.js`.\n3. Include the `socket.js` script provided by this component into your app.\n4. Add `btford.socket-io` as a module dependency to your app.\n\n\n## Usage\n\nFor the most part, this component works exactly like you would expect it to.\nThe only API addition is `socket.forward`, which makes it easier to add/remove listeners in a way that works with [AngularJS's scope](http://docs.angularjs.org/api/ng.$rootScope.Scope).\n\n### `socket.on` / `socket.addListener`\nTakes an event name and callback.\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.removeListener`\nTakes an event name and callback.\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.emit`\nSends a message to the server.\nOptionally takes a callback.\n\nWorks just like the method of the same name from Socket.IO.\n\n### `socket.forward`\n\n`socket.forward` allows you to forward the events recieved by Socket.IO's socket to AngularJS's event system.\nYou can then listen to the event with `$scope.$on`.\nBy default, socket-forwarded events are namespaced with `socket:`.\n\nThe first argument is a string or array of strings listing the event names to be forwarded.\nThe second argument is optional, and is the scope on which the events are to be broadcast.\nIf an argument is not provided, it defaults to `$rootScope`.\nAs a reminder, broadcasted events are propegated down to descendant scopes.\n\n#### Examples\n\nAn easy way to make socket error events available across your app:\n\n```javascript\n\n// in the top-level module of the app\nangular.module('myApp', [\n  'btford.socket-io',\n  'myApp.MyCtrl'\n]).\nrun(function () {\n  socket.forward('error');\n});\n\n// in one of your controllers\nangular.module('myApp.MyCtrl', []).\n  controller('MyCtrl', function ($scope) {\n    $scope.on('socket:error', function (ev, data) {\n\n    });\n  });\n```\n\nAvoid dublicating event handlers when a user navigates back and forth between routes:\n\n```javascript\nangular.module('myMod', ['btford.socket-io']).\n  controller('MyCtrl', function ($scope, socket) {\n    socket.forward('someEvent', $scope);\n    scope.$on('socket:someEvent', function (ev, data) {\n      $scope.theData = data;\n    });\n  });\n```\n\n### `socketProvider.prefix`\n\nThis method changes the prefix for forwarded events.\nThe default prefix is `socket:`.\n\n#### Example\n\nTo remove the prefix:\n\n```javascript\nangular.module('myApp', [\n  'btford.socket-io'\n]).\nconfig(function (socketProvider) {\n  socketProvider.prefix('');\n});\n```\n\n### `socketProvider.ioSocket`\n\nThis method allows you to provide the `socket` service with a `Socket.IO socket` object to be used internally.\nThis is useful if you want to connect on a different path, or need to hold a reference to the `Socket.IO socket` object for use elsewhere.\n\n```javascript\nangular.module('myApp', [\n  'btford.socket-io'\n]).\nconfig(function (socketProvider) {\n  var mySocket = io.connect('/some/other/path');\n  // do stuff with mySocket\n  socketProvider.ioSocket(mySocket);\n});\n```\n\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "angular-socket-io@0.2.0",
  "description": "Bower Component for using AngularJS with [Socket.IO](http://socket.io/), based on [this](http://briantford.com/blog/angular-socket-io.html).",
  "repository": {
    "type": "git",
    "url": "git://github.com/btford/angular-socket-io.git"
  }
}